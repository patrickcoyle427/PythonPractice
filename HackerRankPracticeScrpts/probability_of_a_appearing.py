#!bin/usr/python3

'''
You are given a list of N lowercase English letters. For a given integer K,
you can select any K indices(assume 1-based indexing) with a uniform probability
from the list.

Find the probability that at least one of the K indices selected will
contain the letter: 'a'.
'''

import itertools

def count_a(input_letters, indicie_len):

    # input_letters - a string of letters separated by spaces that contains
    #                 that contains the letter a N number of times.
    # indicie_len - determines the length of the indicies generated by
    #               itertools.combinations()

    input_letters_list = input_letters.split(' ')

    unique_index_combos = itertools.combinations(input_letters_list, indicie_len)
    # Builds an iterable with unique values for the inputs.
    # Example: input is ['a', 'b', 'c', 'd'] and indicie_len is 2:
    # The iterable will contain:
    # (('a', 'b'), ('a', 'c'), ('a', 'd'), ('b', 'c'), ('b', 'd'), ('c', 'd'))

    a_count = 0
    total_checked = 0

    for i in unique_index_combos:

        if 'a' in i:

            a_count += 1

        total_checked += 1

    print(a_count / total_checked)

if __name__ == '__main__':

    letters_to_check = 'a a c d'
    length_of_indicies = 2

    # output of example above should equal to about 0.8333

    count_a(letters_to_check, length_of_indicies)
